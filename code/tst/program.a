loadi R0 IO ; A
loadi R1 IO ; B
loadi R2 IO ; C
loadi R7 IO ; Operation
loadi R6 neg ; R6 <- -1
add R7 R6 ; R7 - 1
jmpz R7 _OP1 ; se R7 == 0, entao OP == 1
add R7 R6 ; R7 - 1
jmpz R7 _OP2 ; se R7 == 0, entao OP == 2
add R7 R6 ; R7 - 1
jmpz R7 _OP3 ; se R7 == 0, entao OP == 3
add R7 R6 ; R7 - 1
jmpz R7 _OP4 ; se R7 == 0, entao OP == 4
add R7 R6 ; R7 - 1
jmpz R7 _OP5 ; se R7 == 0, entao OP == 5
_OP1: .extern OP1
jump _end ; jumps to the end of program
_OP2: .extern OP2
jump _end ; jumps to the end of program
_OP3: .extern OP3
jump _end ; jumps to the end of program
_OP4: .extern OP4
jump _end ; jumps to the end of program
_OP5: .extern OP5
jump _end ; jumps to the end of program
_end: exit
neg: .data 2 -1 ; .data to const -1
